FROM ubuntu:20.04

MAINTAINER Felipe Marques de Almeida <marques.felipe@aluno.unb.br>
SHELL ["/bin/bash", "-c"]
# DEPENDENCIES
WORKDIR /work

# INSTALL MINICONDA
RUN apt-get update && \
			apt-get upgrade -y && \
			apt-get install -y git libc6-dev build-essential hmmer perl bedtools libidn11 wget python python3 python3-pip && \
			wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /miniconda.sh && \
			bash /miniconda.sh -b -p /miniconda
ENV PATH="$PATH:/miniconda/bin"

# Update do latest
RUN conda update -y -n base conda

# Configure Miniconda
RUN conda config --add channels defaults && \
			conda config --add channels bioconda && \
			conda config --add channels conda-forge && \
			conda init --all

## Install bedtools, ncbi-blast+ and custom scripts
RUN rm -rf /var/lib/apt/lists/* && \
			wget https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.10.1/ncbi-blast-2.10.1+-x64-linux.tar.gz && \
			tar -zxvf ncbi-blast-2.10.1+-x64-linux.tar.gz && \
			cd ncbi-blast-2.10.1+/bin/ && \
			ln -rs $(ls) /usr/local/bin/ && \
			mkdir /work/scripts && \
			cd /work/scripts && \
			git clone https://github.com/fmalmeida/genomeGTFtools.git && \
			cd genomeGTFtools/ && \
			ln -rs $(ls) /usr/local/bin/

# INSTALL AMRFinderPlus
RUN conda create -y -n AMRFINDERPLUS && \
			conda install -y -n AMRFINDERPLUS -c bioconda 'ncbi-amrfinderplus==3.8.4' && \
			source activate AMRFINDERPLUS && \
			amrfinder -u && \
			conda deactivate

## Install Diamond
RUN wget https://github.com/bbuchfink/diamond/releases/download/v0.9.25/diamond-linux64.tar.gz && \
			tar zxvf diamond-linux64.tar.gz && \
			mv diamond /usr/local/bin

# INSTALL BARRNAP
RUN conda install -y -c bioconda -c conda-forge 'barrnap==0.9'

# INSTALL EMBOSS
RUN apt-get update && \
			DEBIAN_FRONTEND="noninteractive" apt-get install -y libdatetime-perl libxml-simple-perl libdigest-md5-perl default-jre emboss

# INSTALL MLST
RUN conda create -y -n MLST && \
			conda install -y -n MLST -c conda-forge -c bioconda -c defaults 'mlst==2.19.0'

# INSTALL NANOPOLISH
## Configure Conda
RUN conda create -y -n NANOPOLISH python=3.7 && \
			source activate NANOPOLISH && \
			conda config --add channels r && \
			conda config --add channels bioconda && \
			conda install -y pysam && \
			conda install -y -c anaconda hdf5 && \
			conda install -c bioconda htslib && \
			conda install -c anaconda biopython && \
			conda install -c conda-forge eigen && \
			apt-get install -y libhdf5-dev && \
			conda config --add channels defaults && \
			conda config --add channels conda-forge && \
			conda config --add channels bioconda && \
			conda install -y 'nanopolish==0.13.2' && \
			git clone --recursive https://github.com/jts/nanopolish.git && \
			cd nanopolish && \
			git checkout v0.13.2 && \
			cd .. && \
			mv nanopolish/scripts /work/nanopolish_scripts && \
			rm -r nanopolish && \
			conda install -y -c bioconda 'minimap2==2.17' && \
			conda install -y -c bioconda samtools  && \
			conda install -y -c bioconda seqtk && \
			conda install -y -c conda-forge parallel

# INSTALL PROKKA
#apt-get update && apt-get upgrade -y && \
#apt-get install -y libdatetime-perl libxml-simple-perl libdigest-md5-perl bioperl infernal prodigal aragorn hmmer && \
RUN wget ftp://ftp.jcvi.org/pub/data/TIGRFAMs/TIGRFAMs_15.0_HMM.LIB.gz && \
			conda create -y -n PROKKA && \
			source activate PROKKA && \
			conda install -y -c conda-forge -c bioconda -c defaults 'prokka==1.14.6' && \
			gzip -d TIGRFAMs_15.0_HMM.LIB.gz && \
			mv TIGRFAMs_15.0_HMM.LIB TIGRFAMs_15.hmm && \
			mv TIGRFAMs_15.hmm /miniconda/envs/PROKKA/db/hmm/ && \
			prokka --setupdb && \
			apt-get install -y ncbi-tools-bin

# INSTALL PHIGARO
RUN apt-get install -y tar git libc6-dev gcc g++ locate seqtk && \
			conda install -y -c bioconda prodigal hmmer && \
			python3 -m pip install phigaro==2.2.6 && \
			(echo -e "\n" ; echo -e "\n" ; echo "N" ; echo "N") | phigaro-setup --pvog /work/phigaro_pvog -c /work/phigaro_config.yml --no-updatedb && \
			chmod a+rw -R /work/phigaro_pvog

# Help Phigaro Installation
RUN cd /usr/bin && \
			for i in * ; do ln -rs "$i" /usr/local/bin ; done

# INSTALL RGI
RUN conda create -y -n RGI -c bioconda 'rgi==5.1.1' && \
			wget https://card.mcmaster.ca/latest/data && \
		  tar -xvf data ./card.json && \
			source activate RGI && \
			rgi load --card_json ./card.json

# Install IslandPath
RUN conda create -y -n find_GIs && \
			conda install -y -n find_GIs -c bioconda 'islandpath==1.0.4' && \
			conda install -y -n find_GIs -c conda-forge biopython && \
			git clone https://github.com/brinkmanlab/islandpath.git ./islandpath && \
			ln -rs ./islandpath/Dimob.pl /usr/local/bin

# Download pythonScripts
RUN git clone https://github.com/fmalmeida/pythonScripts.git && \
			cd pythonScripts && \
			git checkout 027742b && \
			cd .. && \
			ln -rs pythonScripts/*.py /usr/local/bin/

# Update blast2gff.py
RUN cd /work/scripts && \
			rm -r genomeGTFtools && \
			git clone https://github.com/fmalmeida/genomeGTFtools.git && \
      cd genomeGTFtools/ && \
			rm /usr/local/bin/blast2gff.py && \
			ln -rs blast2gff.py /usr/local/bin/

# Install Roary dependencies
#RUN conda config --add channels r && \
#			conda config --add channels defaults && \
#			conda config --add channels conda-forge && \
#			conda config --add channels bioconda && \
#			conda create -y -n ROARY && \
#			conda install -y -n ROARY roary && \
#			wget https://github.com/sanger-pathogens/Roary/raw/master/contrib/roary2svg/roary2svg.pl -O /usr/local/bin/roary2svg.pl && \
#			chmod a+x /usr/local/bin/roary2svg.pl && \
#			wget https://github.com/sanger-pathogens/Roary/raw/master/contrib/roary_plots/roary_plots.py -O /usr/local/bin/roary_plots.py && \
#			chmod a+x /usr/local/bin/roary_plots.py
#RUN conda create -y -n ROARY_PLOTS python=3.7 && \
#			conda install -y -n ROARY_PLOTS -c conda-forge matplotlib biopython seaborn pandas

# Install tbl2asn
RUN conda install -y -c bioconda tbl2asn-forever

# Install MongoDB
RUN conda create -y -n mongoDB -c anaconda mongodb pymongo

# Install samtools
RUN apt-get install -y samtools

# IMPORTANT ADDITIONAL DATABASES
workdir /work/dbs

## Pythons scripts for additional databases
RUN conda install -y -c anaconda pip
RUN /miniconda/bin/python3 -m pip install docopt pandas && \
			wget https://github.com/fmalmeida/pythonScripts/raw/027742bc85edc32818f62cc285481ad55a25e486/run_blasts.py && \
			chmod a+x run_blasts.py && \
			mv run_blasts.py /usr/local/bin

## VFDB nt
RUN mkdir vfdb && \
 			wget http://www.mgc.ac.cn/VFs/Down/VFDB_setA_nt.fas.gz && \
			gzip -d VFDB_setA_nt.fas.gz && \
				awk -v db=VFDB '/>/{ split($0,name," "); split($0,id," \\["); all=$0; $0=">" db "~~~" name[2] "~~~" name[1] "~~~[" id[2] " " all }1' VFDB_setA_nt.fas | \
				sed -e 's/~>/~/g' -e 's/ ~/~/g' -e 's/]~/~/g' -e 's/ >/ /' | \
				awk -F "]" ' { if ($0 ~ />/) { gsub(" ", "_", $1); print $1 "] " $2 "]"} else { print $0 }}' > vfdb/sequences && \
			makeblastdb -in vfdb/sequences -title 'vfdb' -dbtype nucl -logfile /dev/null && \
			rm VFDB_setA_nt.fas

## ARGMiner prot
RUN mkdir ARGMiner && \
			wget http://bench.cs.vt.edu/ftp/argminer/release/ARGminer-v1.1.1.A.fasta && \
			awk -v db=ARGMiner '/>/{ split($0,a,"|"); $0=">" db "~~~" a[3] "~~~" a[1] "~~~" a[2] " " a[4] }1' ARGminer-v1.1.1.A.fasta | \
			sed -e 's/~>/~/g' -e 's/gi:.*:ref://g' -e 's/gi:.*:gb://g' -e 's/gi:.*:emb://g' -e 's/:~/~/g' > ARGMiner/sequences && \
			rm ARGminer-v1.1.1.A.fasta && \
			makeblastdb -in ARGMiner/sequences -title 'argminer' -dbtype prot -logfile /dev/null && \
			diamond makedb --in ARGMiner/sequences -d ARGMiner/diamond


## ICEberg nt (ICEs)
RUN mkdir iceberg && \
			wget https://bioinfo-mml.sjtu.edu.cn/ICEberg2/download/ICEberg_seq_experimental_data.fas && \
			awk -v db=ICEberg '/>/{ split($0,a,"|"); all=$0; $0=">" db "~~~" "ICE_" a[2] "~~~" a[5] "~~~" a[3] " " all }1' ICEberg_seq_experimental_data.fas | \
			sed -e 's/ >/ /g' > iceberg/sequences && \
			rm ICEberg_seq_experimental_data.fas && \
			makeblastdb -in iceberg/sequences -title 'iceberg' -dbtype nucl -logfile /dev/null

## ICEberg prot (genes)
RUN wget https://bioinfo-mml.sjtu.edu.cn/ICEberg2/download/ICEberg_aa_experimental_data.fas && \
			awk -v db=ICEberg \
			'/>/{ split($0,col," "); split(col[1],a,"[|]"); split(col[2],b,"[|]"); split($0,c,"[|]"); all=$0; $0=">" db "~~~" "ICE_" a[2] "~~~" b[4] "~~~" c[6] " " all }1' \
			ICEberg_aa_experimental_data.fas | sed -e 's/ >/ /g' | awk -F '\\]' \
			'{ if ($0 ~ />/) { gsub(" ","_",$1); gsub("_\\[","_",$1); gsub("~_","~",$1); print $1,$2 "]" } else { print $0 }}' > iceberg/proteins && \
			diamond makedb --in iceberg/proteins -d iceberg/diamond && \
			makeblastdb -in iceberg/proteins -title 'iceberg' -dbtype prot -logfile /dev/null && \
			rm ICEberg_aa_experimental_data.fas

##  VICTORS prot (genes)
RUN mkdir victors && \
			wget -O victors_original.fasta "http://www.phidias.us/victors/downloads/gen_downloads_protein.php" && \
			grep -v "^[^>M]" victors_original.fasta > victors_prot.fasta && \
			rm victors_original.fasta && \
			awk -v db=victors '/>/{ split($0,a,"|"); split(a[5],gene," \\["); all=$0; $0=">" db "~~~" gene[1] "~~~" a[4] "~~~" "Victors_" a[2] " " all }1' victors_prot.fasta | \
			sed -e 's/ >/ /g' -e 's/~ /~/g' | \
			awk -F "~~~" ' { if ($0 ~ />/) { gsub(" ", "_", $2); print $1 "~~~" $2 "~~~" $3 "~~~" $4 } else { print $0 }}' > victors/sequences && \
			diamond makedb --in victors/sequences -d victors/diamond && \
			makeblastdb -in victors/sequences -title 'victors' -dbtype prot -logfile /dev/null && \
			rm victors_prot.fasta

## PHAST prot (genes)
RUN mkdir phast && \
			wget -O phast_prot.fasta http://phaster.ca/downloads/prophage_virus.db && \
			awk -v db=phast '/>/{ split($0,a,"|"); split(a[5],gene," \\["); all=$0; $0=">" db "~~~" gene[1] "~~~" a[4]"~~~" "PHAST_" a[2] " " all }1' phast_prot.fasta | \
			sed -e 's/ >/ /g' -e 's/~ /~/g' | \
			awk -F "~~~" ' { if ($0 ~ />/) { gsub(" ", "_", $2); print $1 "~~~" $2 "~~~" $3 "~~~" $4 } else { print $0 }}' | \
			awk -F "~~~" ' { if ($0 ~ />/) { gsub("-", "_", $2); print $1 "~~~" $2 "~~~" $3 "~~~" $4 } else { print $0 }}' > phast/sequences && \
			rm phast_prot.fasta && \
			diamond makedb --in phast/sequences -d phast/diamond && \
			makeblastdb -in phast/sequences -title 'phast' -dbtype prot -logfile /dev/null

# CHECK ENVs
RUN conda info -e

# Fix permissions
RUN chmod -R a+rwx /usr/local/lib/python3.8/
RUN chmod -R a+rwx /miniconda/envs/RGI/lib/python3.6/

# For maths
RUN apt-get install -y bc

# Set WorkDir
WORKDIR /work
